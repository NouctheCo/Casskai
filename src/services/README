# src/services

Ce dossier regroupe **tous les services applicatifs** de CassKai, c’est-à-dire les modules chargés de :

- Faire le lien entre l’application et la base de données (CRUD, requêtes Supabase)
- Encapsuler la logique de gestion “métier” côté client (validation, helpers, génération de données)
- Centraliser les appels et opérations réutilisables au sein de l’app

---

## 📁 Structure recommandée

- **Un fichier/service par grande entité** métier ou domaine fonctionnel :
  - `accountsService.*` : gestion CRUD des comptes comptables (table `accounts`)
  - `accountingService.*` : logique métier sur le plan comptable, hiérarchie, validation de comptes (pas d’accès DB)
  - `journalsService.*` : gestion CRUD des journaux comptables (table `journals`)
  - `journalEntryService.*` : gestion CRUD des écritures comptables (table `journal_entries`, `journal_entry_items`)
  - `thirdPartiesService.*` : gestion des tiers (clients, fournisseurs)
  - `currencyService.*` et `currencyIntegration.*` : gestion des devises, taux, conversions
  - `configService.*` : gestion de la configuration globale de l’application
  - `licenseService.*` : gestion des offres et licences
  - `migrationService.*` : gestion des migrations et initialisation de la base
  - etc.

---

## 💡 Bonnes pratiques

- **Pas de logique de présentation/UI** dans ces fichiers : uniquement accès data + logique métier réutilisable.
- **Un service = un rôle bien défini** (évitez les gros “fourre-tout”).
- **Nommez clairement** : préférez le singulier/pluriel selon le métier (“accountsService”, “journalsService”).
- **Documentez chaque fichier** en haut du fichier (but, entités manipulées).
- Si besoin de helpers purs, préférez les mettre dans `src/lib/` ou `src/utils/`.

---

## 🧹 Nettoyage & maintenance

- **Supprimez les doublons** : gardez un seul service par type d’entité/métier.
- **Fusionnez les anciens services générés automatiquement** si leur rôle se recoupe.
- **Gardez à jour ce README** si vous ajoutez un nouveau service important.

---

## Exemple de documentation à mettre en début de fichier

```js
// Service de gestion des journaux comptables (table `journals`)
// CRUD, activation/désactivation, duplication, stats, listing
```
ou
```js
// Service de gestion des écritures comptables (table `journal_entries` + `journal_entry_items`)
// Création, mise à jour, suppression, duplication, filtres, stats, validation équilibrage
```

---

## Questions ?  
Pour toute question sur l’organisation ou le rôle d’un service, contactez l’équipe technique ou consultez la documentation métier.
