// @ts-nocheck
import React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { useToast } from '@/components/ui/use-toast';
import { motion } from 'framer-motion';
import {
  ArrowLeft,
  Clock,
  User,
  Calendar,
  BookOpen,
  CheckCircle,
  ArrowRight,
  MessageCircle,
  ThumbsUp,
  ThumbsDown,
  Share2,
  Copy,
  Star
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { PageContainer } from '@/components/ui/PageContainer';
import { PublicNavigation } from '@/components/navigation/PublicNavigation';
import { categoriesData } from './DocumentationCategoryPage';
import { WhatsAppChat } from '@/components/chat/WhatsAppChat';

// Base de donn√©es simplifi√©e des articles
const articlesDatabase = {
  'creer-votre-premier-compte': {
    id: 'creer-votre-premier-compte',
    title: 'Cr√©er votre premier compte',
    category: 'Premiers pas',
    description: 'Guide complet pour cr√©er votre compte CassKai et commencer √† utiliser la plateforme',
    readTime: '5 min',
    difficulty: 'D√©butant',
    lastUpdated: '2025-01-15',
    author: '√âquipe CassKai',
    rating: 4.8,
    views: 1205,
    content: [
      '# Cr√©er votre premier compte CassKai',
      '',
      'Bienvenue dans CassKai ! Ce guide vous accompagne √©tape par √©tape pour cr√©er votre compte et configurer votre espace de travail.',
      '',
      '## Pr√©requis',
      '',
      '- Une adresse email valide',
      '- Informations de votre entreprise (SIREN, adresse, etc.)',
      '- 5 minutes de votre temps',
      '',
      '## √âtape 1 : Inscription',
      '',
      '1. Rendez-vous sur casskai.app',
      '2. Cliquez sur "Commencer l\'essai gratuit"',
      '3. Saisissez vos informations personnelles',
      '',
      '## √âtape 2 : Configuration de l\'entreprise',
      '',
      'Lors de votre premi√®re connexion, vous devrez renseigner :',
      '',
      '**Informations obligatoires**',
      '- D√©nomination sociale : Le nom officiel de votre entreprise',
      '- SIREN : Votre num√©ro d\'identification (9 chiffres)',
      '- Adresse du si√®ge : L\'adresse officielle de votre entreprise',
      '- Secteur d\'activit√© : Choisissez dans la liste propos√©e',
      '',
      '## √âtape 3 : Choix du plan comptable',
      '',
      'CassKai propose plusieurs r√©f√©rentiels :',
      '',
      '- Plan comptable fran√ßais (PCG 2014)',
      '- Plan comptable SYSCOHADA (pour l\'Afrique de l\'Ouest et Centrale)',
      '- Plan comptable personnalis√©',
      '',
      'üí° **Conseil** : Vous pourrez modifier ce choix ult√©rieurement dans les param√®tres.',
      '',
      '## Prochaines √©tapes',
      '',
      'Maintenant que votre compte est configur√© :',
      '',
      '1. Cr√©ez votre premi√®re facture',
      '2. Configurez vos comptes bancaires',
      '3. Invitez vos collaborateurs',
      '',
      '## Besoin d\'aide ?',
      '',
      '- üí¨ Chat en direct : Disponible 24/7',
      '- üìß Email : support@casskai.app',
      '- üìû T√©l√©phone : +33 6 88 89 33 72'
    ],
    relatedArticles: [
      'configuration-de-entreprise',
      'tour-d-horizon-de-interface',
      'invitation-des-collaborateurs'
    ]
  },
  
  'creer-une-facture': {
    id: 'creer-une-facture',
    title: 'Comment cr√©er votre premi√®re facture',
    category: 'Facturation',
    description: 'Guide complet pour cr√©er et envoyer votre premi√®re facture avec CassKai',
    readTime: '5 min',
    difficulty: 'D√©butant',
    lastUpdated: '2025-01-10',
    author: '√âquipe CassKai',
    rating: 4.9,
    views: 2540,
    content: [
      '# Comment cr√©er votre premi√®re facture',
      '',
      'Cr√©er une facture professionnelle n\'a jamais √©t√© aussi simple avec CassKai. Suivez ce guide pas √† pas.',
      '',
      '## Acc√©der au module Facturation',
      '',
      '1. Depuis votre tableau de bord, cliquez sur **üìÑ Facturation**',
      '2. S√©lectionnez **"Nouvelle facture"**',
      '3. Choisissez le type de facture :',
      '   - **Facture simple** : Pour une vente ponctuelle',
      '   - **Facture r√©currente** : Pour un abonnement',
      '   - **Facture d\'acompte** : Pour un paiement partiel',
      '',
      '## S√©lectionner le client',
      '',
      '### Client existant',
      '1. Commencez √† taper le nom dans le champ "Client"',
      '2. S√©lectionnez le client dans la liste d√©roulante',
      '3. Ses informations se compl√®tent automatiquement',
      '',
      '### Nouveau client',
      '1. Cliquez sur **"+ Nouveau client"**',
      '2. Remplissez les informations obligatoires :',
      '   - D√©nomination ou nom/pr√©nom',
      '   - Adresse compl√®te',
      '   - SIRET (si professionnel)',
      '',
      '## Ajouter des lignes de facture',
      '',
      'Pour chaque produit ou service :',
      '',
      '1. **Description** : D√©crivez clairement la prestation',
      '2. **Quantit√©** : Nombre d\'unit√©s',
      '3. **Prix unitaire HT** : Prix avant taxes',
      '4. **TVA** : S√©lectionnez le taux appropri√©',
      '',
      'üí° **Astuce** : Utilisez les mod√®les de lignes pour gagner du temps.',
      '',
      '## Envoi de la facture',
      '',
      '### Par email (recommand√©)',
      '1. L\'email du client est pr√©-rempli',
      '2. Personnalisez l\'objet et le message',
      '3. La facture PDF est automatiquement jointe',
      '4. Cliquez sur **"Envoyer"**',
      '',
      '## Suivi apr√®s envoi',
      '',
      '### Statuts de facture',
      '- üìù **Brouillon** : En cours de cr√©ation',
      '- üì§ **Envoy√©e** : Transmise au client',
      '- üí∞ **Pay√©e** : Montant encaiss√©',
      '- ‚è∞ **√âchue** : D√©passement du d√©lai',
      '',
      '## Articles compl√©mentaires',
      '',
      '- Personnaliser les mod√®les de facture',
      '- G√©rer les factures r√©currentes',
      '- Configurer les relances automatiques'
    ],
    relatedArticles: [
      'personnaliser-les-modeles',
      'suivi-des-paiements',
      'factures-recurrentes'
    ]
  },

  'configuration-plan-comptable-syscohada': {
    id: 'configuration-plan-comptable-syscohada',
    title: 'Configuration des plans comptables',
    category: 'Comptabilit√©',
    description: 'Param√©trer votre plan comptable selon vos normes locales',
    readTime: '8 min',
    difficulty: 'Interm√©diaire',
    lastUpdated: '2025-01-12',
    author: 'Expert Comptable OHADA',
    rating: 4.7,
    views: 890,
    content: [
      '# Configuration du plan comptable SYSCOHADA',
      '',
      'Le Syst√®me Comptable OHADA (SYSCOHADA) r√©vis√© est obligatoire pour les entreprises des 17 pays membres de l\'OHADA.',
      '',
      '## Qu\'est-ce que le SYSCOHADA ?',
      '',
      'Le SYSCOHADA est le r√©f√©rentiel comptable unifi√© pour les pays OHADA :',
      '',
      '### Pays membres OHADA',
      'üáßüáØ B√©nin ‚Ä¢ üáßüá´ Burkina Faso ‚Ä¢ üá®üá≤ Cameroun ‚Ä¢ üáπüá© Tchad ‚Ä¢ üá®üáÆ C√¥te d\'Ivoire ‚Ä¢ üá¨üá¶ Gabon',
      'üá¨üá≠ Ghana ‚Ä¢ üá¨üá≥ Guin√©e ‚Ä¢ üá¨üáº Guin√©e-Bissau ‚Ä¢ üá≤üá± Mali ‚Ä¢ üá≥üá™ Niger ‚Ä¢ üá∏üá≥ S√©n√©gal ‚Ä¢ üáπüá¨ Togo',
      '',
      '## Activation du plan SYSCOHADA',
      '',
      '### Nouvelle entreprise',
      '1. Lors de l\'onboarding, s√©lectionnez **"Plan comptable SYSCOHADA"**',
      '2. Choisissez votre pays pour les sp√©cificit√©s locales',
      '3. La configuration se fait automatiquement',
      '',
      '### Entreprise existante',
      '1. Allez dans **Param√®tres > Comptabilit√©**',
      '2. Section **"Plan comptable"**',
      '3. Cliquez **"Changer de r√©f√©rentiel"**',
      '‚ö†Ô∏è **Attention** : Cette action n√©cessite une validation comptable',
      '',
      '## Structure du plan SYSCOHADA r√©vis√©',
      '',
      '### Classes principales',
      '',
      '#### Classe 1 - Comptes de ressources durables',
      '- **10** Capital et r√©serves',
      '- **16** Emprunts et dettes assimil√©es',
      '- **19** Provisions financi√®res pour risques et charges',
      '',
      '#### Classe 2 - Comptes d\'actif immobilis√©',
      '- **21** Immobilisations corporelles',
      '- **24** Mat√©riels',
      '- **28** Amortissements des immobilisations',
      '',
      '#### Classe 4 - Comptes de tiers',
      '- **40** Fournisseurs et comptes rattach√©s',
      '- **41** Clients et comptes rattach√©s',
      '- **44** √âtat et collectivit√©s publiques',
      '',
      '#### Classe 6 - Comptes de charges',
      '- **60** Achats et variations de stocks',
      '- **62** Services ext√©rieurs',
      '- **64** Charges de personnel',
      '',
      '#### Classe 7 - Comptes de produits',
      '- **70** Ventes',
      '- **75** Autres produits',
      '- **76** Produits financiers',
      '',
      '## Configuration dans CassKai',
      '',
      '### √âtape 1 : S√©lection du pays',
      'Choisissez votre pays pour adapter :',
      '- Les taux de TVA locaux',
      '- Les comptes d\'imp√¥ts sp√©cifiques',
      '- Les obligations d√©claratives',
      '- La devise de r√©f√©rence',
      '',
      '### √âtape 2 : Param√©trage des comptes',
      'CassKai g√©n√®re automatiquement :',
      '- Structure compl√®te des classes 1 √† 8',
      '- Comptes de TVA selon la l√©gislation locale',
      '- Journaux obligatoires (achats, ventes, banque)',
      '',
      '## √âtats financiers SYSCOHADA',
      '',
      'CassKai g√©n√®re automatiquement :',
      '',
      '#### √âtats primaires',
      '- **Bilan** (mod√®le normal et simplifi√©)',
      '- **Compte de r√©sultat** (nature et fonction)',
      '- **Tableau des flux de tr√©sorerie** (TFT)',
      '',
      '## Formation et support',
      '',
      '### Ressources disponibles',
      '- üìö Guide complet SYSCOHADA (200 pages)',
      '- üé• Vid√©os de formation (15h de contenu)',
      '- üìû Support t√©l√©phonique sp√©cialis√© OHADA'
    ],
    relatedArticles: [
      'ecritures-automatiques',
      'rapports-financiers',
      'export-fec'
    ]
  },

  'invitation-et-gestion-des-utilisateurs': {
    id: 'invitation-et-gestion-des-utilisateurs',
    title: 'Invitation et gestion des utilisateurs',
    category: 'Gestion d\'√©quipe',
    description: 'Ajouter des collaborateurs et d√©finir leurs permissions',
    readTime: '6 min',
    difficulty: 'D√©butant',
    lastUpdated: '2025-01-08',
    author: '√âquipe CassKai',
    rating: 4.6,
    views: 1450,
    content: [
      '# Invitation et gestion des utilisateurs',
      '',
      'Collaborer efficacement avec votre √©quipe gr√¢ce au syst√®me de gestion des utilisateurs de CassKai.',
      '',
      '## Types d\'utilisateurs',
      '',
      '### Administrateur',
      '**Acc√®s complet** √† toutes les fonctionnalit√©s :',
      '- ‚úÖ Gestion des utilisateurs et permissions',
      '- ‚úÖ Configuration g√©n√©rale de l\'entreprise',
      '- ‚úÖ Acc√®s √† tous les modules (compta, facturation, RH...)',
      '- ‚úÖ Consultation des logs et statistiques',
      '',
      '### Comptable',
      '**Acc√®s aux modules financiers** :',
      '- ‚úÖ Comptabilit√© g√©n√©rale et analytique',
      '- ‚úÖ Facturation et gestion commerciale',
      '- ‚úÖ Banques et tr√©sorerie',
      '- ‚úÖ D√©clarations fiscales',
      '- ‚ùå Gestion RH (sauf si autoris√©)',
      '',
      '### Utilisateur Standard',
      '**Acc√®s limit√© selon attribution** :',
      '- ‚úÖ Consultation des donn√©es autoris√©es',
      '- ‚úÖ Saisie dans les modules attribu√©s',
      '- ‚úÖ √âdition de rapports sp√©cifiques',
      '- ‚ùå Modification des param√®tres',
      '',
      '## Inviter un nouvel utilisateur',
      '',
      '### Processus d\'invitation',
      '',
      '1. **Acc√©der √† la gestion des utilisateurs**',
      '   - Allez dans **Param√®tres > Utilisateurs**',
      '   - Cliquez sur **"+ Inviter un utilisateur"**',
      '',
      '2. **Renseigner les informations**',
      '   - Email : john.doe@entreprise.com',
      '   - Pr√©nom : John',
      '   - Nom : Doe',
      '   - Poste : Comptable junior',
      '',
      '3. **D√©finir le niveau d\'acc√®s**',
      '   - S√©lectionnez le **r√¥le principal**',
      '   - Cochez les **modules autoris√©s**',
      '   - Configurez les **permissions sp√©cifiques**',
      '',
      '4. **Envoyer l\'invitation**',
      '   - L\'utilisateur re√ßoit un email automatique',
      '   - Le lien d\'activation expire en 7 jours',
      '',
      '## Gestion des permissions avanc√©es',
      '',
      '### Permissions par module',
      '',
      '#### Module Comptabilit√©',
      '- **Consultation** : Voir les √©critures, bilans, comptes',
      '- **Saisie** : Cr√©er des √©critures, lettrage',
      '- **Validation** : Valider les √©critures, cl√¥tures',
      '',
      '#### Module Facturation',
      '- **Consultation** : Voir factures et devis',
      '- **Cr√©ation** : Cr√©er factures, avoir, devis',
      '- **Envoi** : Transmettre aux clients',
      '',
      '## S√©curit√© et authentification',
      '',
      '### Authentification √† deux facteurs (2FA)',
      '**Obligatoire pour :**',
      '- Administrateurs',
      '- Comptables avec droit de validation',
      '- Acc√®s aux donn√©es sensibles',
      '',
      '**Configuration :**',
      '1. SMS sur t√©l√©phone portable',
      '2. Application authenticator (Google, Microsoft)',
      '3. Codes de r√©cup√©ration d\'urgence',
      '',
      '### Politique de mots de passe',
      '**Crit√®res obligatoires :**',
      '- Minimum 8 caract√®res',
      '- 1 majuscule, 1 minuscule, 1 chiffre',
      '- 1 caract√®re sp√©cial',
      '- Renouvellement tous les 6 mois',
      '',
      '## Besoin d\'aide ?',
      '',
      'La gestion des utilisateurs est cruciale pour la s√©curit√©. N\'accordez que les permissions n√©cessaires !'
    ],
    relatedArticles: [
      'ajouter-des-utilisateurs',
      'definir-les-roles',
      'securite-des-acces'
    ]
  },

  'connexion-bancaire-automatique': {
    id: 'connexion-bancaire-automatique',
    title: 'Connexion bancaire automatique',
    category: 'Int√©grations',
    description: 'Synchroniser vos comptes bancaires pour un rapprochement automatique',
    readTime: '10 min',
    difficulty: 'Interm√©diaire',
    lastUpdated: '2025-01-05',
    author: 'Expert Technique',
    rating: 4.5,
    views: 756,
    content: [
      '# Connexion bancaire automatique',
      '',
      'Automatisez votre comptabilit√© en synchronisant directement vos comptes bancaires avec CassKai.',
      '',
      '## Pourquoi connecter vos banques ?',
      '',
      '### Avantages de l\'automatisation',
      '- ‚ö° **Gain de temps** : Fini la saisie manuelle des √©critures',
      '- üéØ **Pr√©cision** : √âlimination des erreurs de frappe',
      '- üìä **Vision temps r√©el** : Tr√©sorerie actualis√©e en permanence',
      '- üîç **Rapprochement automatique** : Lettrage intelligent des √©critures',
      '',
      '### Cas d\'usage pratiques',
      '- Suivi quotidien de tr√©sorerie',
      '- Rapprochement bancaire automatis√©',
      '- D√©tection des impay√©s clients',
      '- Analyse des charges r√©currentes',
      '',
      '## Banques compatibles',
      '',
      '### France üá´üá∑',
      '**Banques universelles :**',
      '- BNP Paribas (particuliers & entreprises)',
      '- Cr√©dit Agricole (toutes caisses r√©gionales)',
      '- Soci√©t√© G√©n√©rale (particuliers & pro)',
      '- LCL (Le Cr√©dit Lyonnais)',
      '- Cr√©dit Mutuel (f√©d√©rations)',
      '',
      '**Banques en ligne :**',
      '- Boursorama Banque',
      '- Fortuneo',
      '- ING Direct',
      '- Hello Bank! (BNP Paribas)',
      '',
      '### Afrique üåç',
      '**S√©n√©gal :**',
      '- CBAO Groupe Attijariwafa Bank',
      '- Banque Atlantique',
      '- UBA S√©n√©gal',
      '- Ecobank S√©n√©gal',
      '',
      '**C√¥te d\'Ivoire :**',
      '- Soci√©t√© G√©n√©rale C√¥te d\'Ivoire',
      '- BNP Paribas BICI',
      '- Ecobank C√¥te d\'Ivoire',
      '- UBA C√¥te d\'Ivoire',
      '',
      '## Processus de connexion',
      '',
      '### √âtape 1 : Pr√©paration',
      '**Documents n√©cessaires :**',
      '- RIB de chaque compte √† connecter',
      '- Identifiants de banque en ligne',
      '- Num√©ro de t√©l√©phone (pour validation SMS)',
      '',
      '**V√©rifications pr√©alables :**',
      '- ‚úÖ Banque en ligne activ√©e',
      '- ‚úÖ Acc√®s fonctionnel aux comptes',
      '- ‚úÖ Derni√®re connexion r√©cente (< 30 jours)',
      '',
      '### √âtape 2 : Configuration dans CassKai',
      '1. **Acc√©der au module Banques**',
      '   - Menu **Banques > Comptes bancaires**',
      '   - Cliquez **"+ Ajouter un compte"**',
      '',
      '2. **S√©lectionner votre √©tablissement**',
      '   - Tapez le nom de votre banque',
      '   - S√©lectionnez dans la liste',
      '   - V√©rifiez le logo affich√©',
      '',
      '3. **Renseigner vos identifiants**',
      '   - Num√©ro client : 12345678',
      '   - Code secret : (votre mot de passe)',
      '   - Code d\'acc√®s : 123456 (si applicable)',
      '',
      '4. **Validation par la banque**',
      '   - SMS de confirmation re√ßu',
      '   - Code de validation saisi',
      '   - Autorisation accord√©e',
      '',
      '### √âtape 3 : S√©lection des comptes',
      '**Types de comptes d√©tect√©s :**',
      '- üí≥ Comptes courants professionnels',
      '- üí∞ Comptes d\'√©pargne entreprise',
      '- üì± Comptes livrets',
      '- üè¶ Comptes multi-devises',
      '',
      '## Cat√©gorisation automatique',
      '',
      '### Intelligence artificielle int√©gr√©e',
      'CassKai analyse automatiquement :',
      '- **Libell√© de l\'op√©ration** (mots-cl√©s)',
      '- **Montant et fr√©quence** (r√©currence)',
      '- **Tiers identifi√©** (base clients/fournisseurs)',
      '- **Historique des cat√©gories** (apprentissage)',
      '',
      '### Exemples de r√®gles automatiques',
      '- "VIREMENT DE DUPONT SA" ‚Üí Client DUPONT',
      '- "PRLV SEPA EDF" ‚Üí √âlectricit√©',
      '- "CB CARREFOUR MARKET" ‚Üí Achats bureautique',
      '- "FRAIS TENUE COMPTE" ‚Üí Frais bancaires',
      '',
      '## S√©curit√© et confidentialit√©',
      '',
      '### Protection des donn√©es bancaires',
      '- üîí **Chiffrement AES-256** : Donn√©es et communications',
      '- üè¶ **Agr√©gateur certifi√©** : Partenaire agr√©√© ACPR/BCE',
      '- üîê **Authentification forte** : 2FA obligatoire',
      '- üö´ **Zero-storage** : Pas de stockage des identifiants',
      '',
      '### Conformit√© r√©glementaire',
      '**DSP2 (Directive europ√©enne) :**',
      '- ‚úÖ Consentement explicite du client',
      '- ‚úÖ Renouvellement tous les 90 jours',
      '- ‚úÖ Audit trail complet',
      '- ‚úÖ Droit de r√©vocation imm√©diate',
      '',
      '## Tarification des connexions',
      '',
      '### Mod√®le de facturation',
      '- **Comptes inclus** : 3 comptes par d√©faut',
      '- **Comptes suppl√©mentaires** : 5‚Ç¨/mois par compte',
      '- **Historique √©tendu** : +2‚Ç¨/mois (> 12 mois)',
      '- **Multi-√©tablissements** : Gratuit',
      '',
      'La synchronisation bancaire transforme votre comptabilit√©. Testez d√®s maintenant !'
    ]
  },
  'introduction-api': {
    id: 'introduction-api',
    title: 'Introduction √† l\'API CassKai',
    category: 'API et webhooks',
    description: 'D√©couvrez les bases de l\'API REST de CassKai et comment l\'utiliser',
    readTime: '8 min',
    difficulty: 'Interm√©diaire',
    lastUpdated: '2025-01-15',
    author: '√âquipe technique CassKai',
    rating: 4.6,
    views: 856,
    content: [
      '# Introduction √† l\'API CassKai',
      '',
      'L\'API CassKai vous permet d\'int√©grer facilement vos donn√©es comptables et de facturation avec vos applications tierces.',
      '',
      '## Vue d\'ensemble',
      '',
      'L\'API CassKai est une API REST moderne qui respecte les standards de l\'industrie :',
      '',
      '- **Architecture REST** : Endpoints logiques et pr√©visibles',
      '- **Format JSON** : Toutes les donn√©es en JSON',
      '- **HTTPS uniquement** : S√©curit√© SSL/TLS obligatoire',
      '- **Authentification Bearer** : Tokens JWT s√©curis√©s',
      '- **Rate limiting** : Protection contre les abus',
      '',
      '## URL de base',
      '',
      '```',
      'https://api.casskai.app/v1/',
      '```',
      '',
      '## Authentification',
      '',
      'Toutes les requ√™tes doivent inclure un token d\'authentification dans l\'en-t√™te :',
      '',
      '```http',
      'Authorization: Bearer YOUR_API_TOKEN',
      'Content-Type: application/json',
      '```',
      '',
      '## Structure des r√©ponses',
      '',
      '### R√©ponse de succ√®s',
      '```json',
      '{',
      '  "success": true,',
      '  "data": {...},',
      '  "pagination": {',
      '    "page": 1,',
      '    "limit": 20,',
      '    "total": 150',
      '  }',
      '}',
      '```',
      '',
      '### R√©ponse d\'erreur',
      '```json',
      '{',
      '  "success": false,',
      '  "error": {',
      '    "code": "VALIDATION_ERROR",',
      '    "message": "Champ requis manquant",',
      '    "details": [...]',
      '  }',
      '}',
      '```',
      '',
      '## Codes de statut HTTP',
      '',
      '- **200** : Succ√®s',
      '- **201** : Ressource cr√©√©e',
      '- **400** : Erreur de validation',
      '- **401** : Non authentifi√©',
      '- **403** : Acc√®s refus√©',
      '- **404** : Ressource non trouv√©e',
      '- **429** : Trop de requ√™tes',
      '- **500** : Erreur serveur',
      '',
      '## Pagination',
      '',
      'Les listes sont pagin√©es avec les param√®tres :',
      '',
      '- `page` : Num√©ro de page (d√©faut: 1)',
      '- `limit` : Nombre d\'√©l√©ments par page (d√©faut: 20, max: 100)',
      '',
      '## Limites de taux',
      '',
      '- **Standard** : 1000 requ√™tes/heure',
      '- **Premium** : 5000 requ√™tes/heure',
      '- **Enterprise** : 10000 requ√™tes/heure',
      '',
      'üöÄ **Pr√™t √† commencer ?** Consultez le guide d\'authentification pour obtenir votre premier token !'
    ]
  },
  'authentification-api': {
    id: 'authentification-api',
    title: 'Authentification API',
    category: 'API et webhooks',
    description: 'Comment s\'authentifier et g√©rer les tokens d\'acc√®s',
    readTime: '10 min',
    difficulty: 'Interm√©diaire',
    lastUpdated: '2025-01-15',
    author: '√âquipe technique CassKai',
    rating: 4.8,
    views: 743,
    content: [
      '# Authentification API CassKai',
      '',
      'L\'API CassKai utilise des tokens JWT (JSON Web Tokens) pour l\'authentification.',
      '',
      '## Obtenir un token d\'API',
      '',
      '### 1. Via l\'interface CassKai',
      '',
      '1. Connectez-vous √† votre compte CassKai',
      '2. Allez dans **Param√®tres** ‚Üí **Int√©grations** ‚Üí **Tokens API**',
      '3. Cliquez sur **G√©n√©rer un nouveau token**',
      '4. Donnez un nom √† votre token (ex: "Integration Shopify")',
      '5. D√©finissez les permissions n√©cessaires',
      '6. Copiez le token affich√© (il ne sera plus visible apr√®s)',
      '',
      '### 2. Via l\'endpoint d\'authentification',
      '',
      '```http',
      'POST /v1/auth/login',
      'Content-Type: application/json',
      '',
      '{',
      '  "email": "votre-email@exemple.com",',
      '  "password": "votre-mot-de-passe"',
      '}',
      '```',
      '',
      '**R√©ponse :**',
      '```json',
      '{',
      '  "success": true,',
      '  "data": {',
      '    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",',
      '    "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",',
      '    "expires_in": 3600,',
      '    "token_type": "Bearer"',
      '  }',
      '}',
      '```',
      '',
      '## Utiliser le token',
      '',
      '### Headers HTTP requis',
      '```http',
      'Authorization: Bearer YOUR_ACCESS_TOKEN',
      'Content-Type: application/json',
      'Accept: application/json',
      '```',
      '',
      '### Exemple avec cURL',
      '```bash',
      'curl -X GET \\',
      '  "https://api.casskai.app/v1/companies" \\',
      '  -H "Authorization: Bearer YOUR_ACCESS_TOKEN" \\',
      '  -H "Content-Type: application/json"',
      '```',
      '',
      '### Exemple avec JavaScript',
      '```javascript',
      'const response = await fetch("https://api.casskai.app/v1/companies", {',
      '  headers: {',
      '    "Authorization": "Bearer " + token,',
      '    "Content-Type": "application/json"',
      '  }',
      '});',
      '',
      'const data = await response.json();',
      '```',
      '',
      '## Gestion des tokens',
      '',
      '### Dur√©e de vie',
      '- **Access token** : 1 heure',
      '- **Refresh token** : 30 jours',
      '- **API token (interface)** : Pas d\'expiration (r√©vocable)',
      '',
      '### Renouveler un token',
      '```http',
      'POST /v1/auth/refresh',
      'Content-Type: application/json',
      '',
      '{',
      '  "refresh_token": "YOUR_REFRESH_TOKEN"',
      '}',
      '```',
      '',
      '### R√©voquer un token',
      '```http',
      'POST /v1/auth/revoke',
      'Authorization: Bearer YOUR_ACCESS_TOKEN',
      'Content-Type: application/json',
      '',
      '{',
      '  "token": "TOKEN_TO_REVOKE"',
      '}',
      '```',
      '',
      '## Permissions et scopes',
      '',
      'Les tokens peuvent avoir diff√©rents niveaux d\'acc√®s :',
      '',
      '- **read:companies** : Lire les informations d\'entreprise',
      '- **write:companies** : Modifier les informations d\'entreprise',
      '- **read:accounting** : Consulter les donn√©es comptables',
      '- **write:accounting** : Cr√©er/modifier les √©critures',
      '- **read:invoices** : Consulter les factures',
      '- **write:invoices** : Cr√©er/modifier les factures',
      '',
      '## Erreurs d\'authentification',
      '',
      '### Token manquant (401)',
      '```json',
      '{',
      '  "success": false,',
      '  "error": {',
      '    "code": "MISSING_TOKEN",',
      '    "message": "Token d\'authentification requis"',
      '  }',
      '}',
      '```',
      '',
      '### Token invalide (401)',
      '```json',
      '{',
      '  "success": false,',
      '  "error": {',
      '    "code": "INVALID_TOKEN",',
      '    "message": "Token d\'authentification invalide"',
      '  }',
      '}',
      '```',
      '',
      '### Token expir√© (401)',
      '```json',
      '{',
      '  "success": false,',
      '  "error": {',
      '    "code": "TOKEN_EXPIRED",',
      '    "message": "Token d\'authentification expir√©"',
      '  }',
      '}',
      '```',
      '',
      'üîê **Important** : Stockez vos tokens de mani√®re s√©curis√©e et ne les exposez jamais c√¥t√© client !'
    ]
  },
  'endpoints-comptabilite': {
    id: 'endpoints-comptabilite',
    title: 'Endpoints de comptabilit√©',
    category: 'API et webhooks',
    description: 'API pour g√©rer les √©critures comptables, journaux et comptes',
    readTime: '15 min',
    difficulty: 'Avanc√©',
    lastUpdated: '2025-01-15',
    author: '√âquipe technique CassKai',
    rating: 4.4,
    views: 412,
    content: [
      '# Endpoints de comptabilit√©',
      '',
      'Les endpoints de comptabilit√© permettent de g√©rer les √©critures, journaux et plan comptable.',
      '',
      '## Plan comptable',
      '',
      '### Lister les comptes',
      '```http',
      'GET /v1/accounting/accounts',
      '```',
      '',
      '**Param√®tres optionnels :**',
      '- `class` : Filtrer par classe de compte (1-8)',
      '- `active` : true/false pour les comptes actifs',
      '- `search` : Recherche par num√©ro ou libell√©',
      '',
      '**R√©ponse :**',
      '```json',
      '{',
      '  "success": true,',
      '  "data": [',
      '    {',
      '      "id": "acc_123",',
      '      "number": "411000",',
      '      "name": "Clients",',
      '      "class": 4,',
      '      "type": "asset",',
      '      "active": true,',
      '      "created_at": "2025-01-15T10:00:00Z"',
      '    }',
      '  ]',
      '}',
      '```',
      '',
      '### Cr√©er un compte',
      '```http',
      'POST /v1/accounting/accounts',
      'Content-Type: application/json',
      '',
      '{',
      '  "number": "512100",',
      '  "name": "Banque Cr√©dit Agricole",',
      '  "class": 5,',
      '  "type": "asset",',
      '  "parent_account": "512000"',
      '}',
      '```',
      '',
      '## Journaux comptables',
      '',
      '### Lister les journaux',
      '```http',
      'GET /v1/accounting/journals',
      '```',
      '',
      '**R√©ponse :**',
      '```json',
      '{',
      '  "success": true,',
      '  "data": [',
      '    {',
      '      "id": "jnl_123",',
      '      "code": "VT",',
      '      "name": "Journal des ventes",',
      '      "type": "sale",',
      '      "active": true',
      '    }',
      '  ]',
      '}',
      '```',
      '',
      '### Types de journaux disponibles',
      '- **purchase** : Achats',
      '- **sale** : Ventes',
      '- **bank** : Banque',
      '- **cash** : Caisse',
      '- **general** : Op√©rations diverses',
      '',
      '## √âcritures comptables',
      '',
      '### Lister les √©critures',
      '```http',
      'GET /v1/accounting/entries',
      '```',
      '',
      '**Param√®tres optionnels :**',
      '- `journal_id` : Filtrer par journal',
      '- `date_from` : Date de d√©but (YYYY-MM-DD)',
      '- `date_to` : Date de fin (YYYY-MM-DD)',
      '- `account` : Filtrer par compte',
      '',
      '### Cr√©er une √©criture',
      '```http',
      'POST /v1/accounting/entries',
      'Content-Type: application/json',
      '',
      '{',
      '  "date": "2025-01-15",',
      '  "reference": "FAC001",',
      '  "journal_id": "jnl_123",',
      '  "description": "Facture client ABC",',
      '  "lines": [',
      '    {',
      '      "account_id": "acc_411",',
      '      "description": "Client ABC",',
      '      "debit": 1200.00,',
      '      "credit": 0',
      '    },',
      '    {',
      '      "account_id": "acc_701",',
      '      "description": "Vente produits",',
      '      "debit": 0,',
      '      "credit": 1000.00',
      '    },',
      '    {',
      '      "account_id": "acc_445",',
      '      "description": "TVA collect√©e",',
      '      "debit": 0,',
      '      "credit": 200.00',
      '    }',
      '  ]',
      '}',
      '```',
      '',
      '### Validation d\'√©criture',
      'Les √©critures doivent respecter :',
      '',
      '- **√âquilibre** : Total d√©bits = Total cr√©dits',
      '- **Journal** : Journal existant et actif',
      '- **Comptes** : Comptes existants et compatibles',
      '- **Date** : Dans l\'exercice comptable ouvert',
      '',
      '### Modifier une √©criture',
      '```http',
      'PUT /v1/accounting/entries/{entry_id}',
      '```',
      '',
      '‚ö†Ô∏è **Attention** : Seules les √©critures non lettr√©es et dans l\'exercice ouvert peuvent √™tre modifi√©es.',
      '',
      '## Balance et √©tats comptables',
      '',
      '### Balance des comptes',
      '```http',
      'GET /v1/accounting/balance',
      '```',
      '',
      '**Param√®tres :**',
      '- `date_from` : Date de d√©but',
      '- `date_to` : Date de fin',
      '- `account_class` : Classe de comptes (1-8)',
      '',
      '### Grand livre',
      '```http',
      'GET /v1/accounting/ledger',
      '```',
      '',
      '### Bilan comptable',
      '```http',
      'GET /v1/accounting/balance-sheet',
      '```',
      '',
      '### Compte de r√©sultat',
      '```http',
      'GET /v1/accounting/income-statement',
      '```',
      '',
      '## Cl√¥ture d\'exercice',
      '',
      '### Cl√¥turer l\'exercice',
      '```http',
      'POST /v1/accounting/close-period',
      'Content-Type: application/json',
      '',
      '{',
      '  "closing_date": "2024-12-31",',
      '  "generate_reports": true',
      '}',
      '```',
      '',
      'üìä **Conseil** : Utilisez les webhooks pour √™tre notifi√© des changements d\'√©tat des √©critures !'
    ]
  },
  'endpoints-facturation': {
    id: 'endpoints-facturation',
    title: 'Endpoints de facturation',
    category: 'API et webhooks',
    description: 'Cr√©er, modifier et g√©rer les factures via l\'API',
    readTime: '12 min',
    difficulty: 'Avanc√©',
    lastUpdated: '2025-01-15',
    author: '√âquipe technique CassKai',
    rating: 4.7,
    views: 567,
    content: [
      '# Endpoints de facturation',
      '',
      'Les endpoints de facturation permettent de g√©rer factures, devis et avoirs.',
      '',
      '## Factures',
      '',
      '### Lister les factures',
      '```http',
      'GET /v1/invoices',
      '```',
      '',
      '**Param√®tres optionnels :**',
      '- `status` : draft, sent, paid, overdue, cancelled',
      '- `customer_id` : Filtrer par client',
      '- `date_from` / `date_to` : P√©riode',
      '- `number` : Num√©ro de facture',
      '',
      '**R√©ponse :**',
      '```json',
      '{',
      '  "success": true,',
      '  "data": [',
      '    {',
      '      "id": "inv_123",',
      '      "number": "FAC-2025-001",',
      '      "status": "sent",',
      '      "date": "2025-01-15",',
      '      "due_date": "2025-02-14",',
      '      "customer": {',
      '        "id": "cust_456",',
      '        "name": "Entreprise ABC",',
      '        "email": "comptabilite@abc.fr"',
      '      },',
      '      "total_ht": 1000.00,',
      '      "total_ttc": 1200.00,',
      '      "currency": "EUR"',
      '    }',
      '  ]',
      '}',
      '```',
      '',
      '### Cr√©er une facture',
      '```http',
      'POST /v1/invoices',
      'Content-Type: application/json',
      '',
      '{',
      '  "customer_id": "cust_456",',
      '  "date": "2025-01-15",',
      '  "due_date": "2025-02-14",',
      '  "currency": "EUR",',
      '  "payment_terms": "30_days",',
      '  "lines": [',
      '    {',
      '      "description": "D√©veloppement site web",',
      '      "quantity": 1,',
      '      "unit_price": 1000.00,',
      '      "tax_rate": 20.0,',
      '      "account_code": "706000"',
      '    }',
      '  ],',
      '  "notes": "Merci pour votre confiance"',
      '}',
      '```',
      '',
      '### √âtats de facture',
      '',
      '- **draft** : Brouillon (modifiable)',
      '- **sent** : Envoy√©e au client',
      '- **viewed** : Vue par le client',
      '- **paid** : Pay√©e int√©gralement',
      '- **partial** : Pay√©e partiellement',
      '- **overdue** : En retard de paiement',
      '- **cancelled** : Annul√©e',
      '',
      '### Envoyer une facture',
      '```http',
      'POST /v1/invoices/{invoice_id}/send',
      'Content-Type: application/json',
      '',
      '{',
      '  "email": "client@exemple.com",',
      '  "subject": "Facture FAC-2025-001",',
      '  "message": "Veuillez trouver ci-joint votre facture.",',
      '  "send_copy_to_me": true',
      '}',
      '```',
      '',
      '## Devis',
      '',
      '### Cr√©er un devis',
      '```http',
      'POST /v1/quotes',
      'Content-Type: application/json',
      '',
      '{',
      '  "customer_id": "cust_456",',
      '  "date": "2025-01-15",',
      '  "validity_date": "2025-02-15",',
      '  "lines": [',
      '    {',
      '      "description": "Consultation SEO",',
      '      "quantity": 5,',
      '      "unit_price": 200.00,',
      '      "tax_rate": 20.0',
      '    }',
      '  ]',
      '}',
      '```',
      '',
      '### Convertir un devis en facture',
      '```http',
      'POST /v1/quotes/{quote_id}/convert',
      'Content-Type: application/json',
      '',
      '{',
      '  "invoice_date": "2025-01-15",',
      '  "due_date": "2025-02-14"',
      '}',
      '```',
      '',
      '## Avoirs',
      '',
      '### Cr√©er un avoir',
      '```http',
      'POST /v1/credit-notes',
      'Content-Type: application/json',
      '',
      '{',
      '  "invoice_id": "inv_123",',
      '  "reason": "Retour produit d√©fectueux",',
      '  "lines": [',
      '    {',
      '      "description": "Remboursement produit",',
      '      "quantity": 1,',
      '      "unit_price": -200.00,',
      '      "tax_rate": 20.0',
      '    }',
      '  ]',
      '}',
      '```',
      '',
      '## Paiements',
      '',
      '### Enregistrer un paiement',
      '```http',
      'POST /v1/invoices/{invoice_id}/payments',
      'Content-Type: application/json',
      '',
      '{',
      '  "amount": 1200.00,',
      '  "date": "2025-01-20",',
      '  "method": "bank_transfer",',
      '  "reference": "VIR123456",',
      '  "bank_account_id": "bank_789"',
      '}',
      '```',
      '',
      '### M√©thodes de paiement',
      '- **bank_transfer** : Virement bancaire',
      '- **check** : Ch√®que',
      '- **cash** : Esp√®ces',
      '- **credit_card** : Carte bancaire',
      '- **online** : Paiement en ligne',
      '',
      '## Clients',
      '',
      '### Cr√©er un client',
      '```http',
      'POST /v1/customers',
      'Content-Type: application/json',
      '',
      '{',
      '  "company_name": "Entreprise ABC",',
      '  "contact_name": "Jean Dupont",',
      '  "email": "jean.dupont@abc.fr",',
      '  "phone": "+33 1 23 45 67 89",',
      '  "address": {',
      '    "street": "123 Rue de la Paix",',
      '    "city": "Paris",',
      '    "postal_code": "75001",',
      '    "country": "FR"',
      '  },',
      '  "vat_number": "FR12345678901",',
      '  "payment_terms": "30_days"',
      '}',
      '```',
      '',
      '## Num√©rotation automatique',
      '',
      'CassKai g√©n√®re automatiquement les num√©ros :',
      '',
      '- **Factures** : FAC-YYYY-XXX',
      '- **Devis** : DEV-YYYY-XXX',
      '- **Avoirs** : AVO-YYYY-XXX',
      '',
      'Format personnalisable dans les param√®tres de l\'entreprise.',
      '',
      '## Webhooks de facturation',
      '',
      '√âv√©nements disponibles :',
      '',
      '- `invoice.created` : Facture cr√©√©e',
      '- `invoice.sent` : Facture envoy√©e',
      '- `invoice.paid` : Facture pay√©e',
      '- `invoice.overdue` : Facture en retard',
      '',
      'üí° **Astuce** : Utilisez les webhooks pour automatiser votre suivi de paiements !'
    ]
  },
  'webhooks-configuration': {
    id: 'webhooks-configuration',
    title: 'Configuration des webhooks',
    category: 'API et webhooks',
    description: 'Recevoir des notifications en temps r√©el des √©v√©nements CassKai',
    readTime: '20 min',
    difficulty: 'Avanc√©',
    lastUpdated: '2025-01-15',
    author: '√âquipe technique CassKai',
    rating: 4.2,
    views: 234,
    content: [
      '# Configuration des webhooks',
      '',
      'Les webhooks permettent de recevoir des notifications en temps r√©el lors d\'√©v√©nements dans CassKai.',
      '',
      '## Qu\'est-ce qu\'un webhook ?',
      '',
      'Un webhook est une requ√™te HTTP POST envoy√©e automatiquement √† votre serveur quand un √©v√©nement se produit dans CassKai.',
      '',
      '**Avantages :**',
      '- Notifications en temps r√©el',
      '- Pas de polling n√©cessaire',
      '- Int√©gration √©v√©nementielle',
      '- R√©duction de la charge serveur',
      '',
      '## Configuration',
      '',
      '### 1. Via l\'interface CassKai',
      '',
      '1. Allez dans **Param√®tres** ‚Üí **Int√©grations** ‚Üí **Webhooks**',
      '2. Cliquez sur **Nouveau webhook**',
      '3. Configurez l\'endpoint :',
      '   - **URL** : https://votre-serveur.com/webhook/casskai',
      '   - **√âv√©nements** : S√©lectionnez les √©v√©nements',
      '   - **Secret** : Cl√© secr√®te pour validation',
      '',
      '### 2. Via l\'API',
      '',
      '```http',
      'POST /v1/webhooks',
      'Content-Type: application/json',
      '',
      '{',
      '  "url": "https://votre-serveur.com/webhook/casskai",',
      '  "events": ["invoice.paid", "customer.created"],',
      '  "secret": "votre-secret-webhook",',
      '  "active": true',
      '}',
      '```',
      '',
      '## √âv√©nements disponibles',
      '',
      '### Facturation',
      '- `invoice.created` : Facture cr√©√©e',
      '- `invoice.updated` : Facture modifi√©e',
      '- `invoice.sent` : Facture envoy√©e',
      '- `invoice.paid` : Facture pay√©e',
      '- `invoice.overdue` : Facture en retard',
      '- `invoice.cancelled` : Facture annul√©e',
      '',
      '### Clients',
      '- `customer.created` : Client cr√©√©',
      '- `customer.updated` : Client modifi√©',
      '- `customer.deleted` : Client supprim√©',
      '',
      '### Comptabilit√©',
      '- `entry.created` : √âcriture cr√©√©e',
      '- `entry.validated` : √âcriture valid√©e',
      '- `period.closed` : P√©riode cl√¥tur√©e',
      '',
      '### Paiements',
      '- `payment.received` : Paiement re√ßu',
      '- `payment.failed` : Paiement √©chou√©',
      '',
      '## Structure d\'un webhook',
      '',
      '### Headers HTTP',
      '```',
      'POST /webhook/casskai HTTP/1.1',
      'Host: votre-serveur.com',
      'Content-Type: application/json',
      'X-CassKai-Event: invoice.paid',
      'X-CassKai-Signature: sha256=abc123...',
      'X-CassKai-Delivery: 12345678-1234-1234-1234-123456789012',
      'User-Agent: CassKai-Webhook/1.0',
      '```',
      '',
      '### Payload JSON',
      '```json',
      '{',
      '  "id": "evt_123456789",',
      '  "event": "invoice.paid",',
      '  "created_at": "2025-01-15T14:30:00Z",',
      '  "data": {',
      '    "object": "invoice",',
      '    "id": "inv_123",',
      '    "number": "FAC-2025-001",',
      '    "status": "paid",',
      '    "total": 1200.00,',
      '    "customer": {',
      '      "id": "cust_456",',
      '      "name": "Entreprise ABC"',
      '    },',
      '    "payment": {',
      '      "amount": 1200.00,',
      '      "method": "bank_transfer",',
      '      "date": "2025-01-15"',
      '    }',
      '  }',
      '}',
      '```',
      '',
      '## Validation des webhooks',
      '',
      '### V√©rification de signature',
      '',
      'CassKai signe chaque webhook avec HMAC-SHA256 :',
      '',
      '```javascript',
      'const crypto = require(\'crypto\');',
      '',
      'function validateWebhook(payload, signature, secret) {',
      '  const expectedSignature = crypto',
      '    .createHmac(\'sha256\', secret)',
      '    .update(payload, \'utf8\')',
      '    .digest(\'hex\');',
      '',
      '  return signature === `sha256=${expectedSignature}`;',
      '}',
      '```',
      '',
      '### Exemple Node.js/Express',
      '',
      '```javascript',
      'const express = require(\'express\');',
      'const crypto = require(\'crypto\');',
      '',
      'const app = express();',
      '',
      'app.use(\'/webhook\', express.raw({ type: \'application/json\' }));',
      '',
      'app.post(\'/webhook/casskai\', (req, res) => {',
      '  const signature = req.headers[\'x-casskai-signature\'];',
      '  const event = req.headers[\'x-casskai-event\'];',
      '  const payload = req.body;',
      '',
      '  // Validation de signature',
      '  if (!validateWebhook(payload, signature, process.env.WEBHOOK_SECRET)) {',
      '    return res.status(401).send(\'Signature invalide\');',
      '  }',
      '',
      '  // Traitement de l\'√©v√©nement',
      '  switch (event) {',
      '    case \'invoice.paid\':',
      '      handleInvoicePaid(JSON.parse(payload));',
      '      break;',
      '    case \'customer.created\':',
      '      handleCustomerCreated(JSON.parse(payload));',
      '      break;',
      '  }',
      '',
      '  res.status(200).send(\'OK\');',
      '});',
      '```',
      '',
      '## Gestion des √©checs',
      '',
      '### Strat√©gie de retry',
      '',
      'En cas d\'√©chec (code HTTP non 2xx) :',
      '',
      '1. **Retry imm√©diat** apr√®s 1 seconde',
      '2. **Retry exponential** : 2s, 4s, 8s, 16s, 32s',
      '3. **Abandon** apr√®s 5 tentatives',
      '',
      '### Codes de r√©ponse attendus',
      '',
      '- **200-299** : Succ√®s (pas de retry)',
      '- **400-499** : Erreur client (pas de retry)',
      '- **500-599** : Erreur serveur (retry)',
      '- **Timeout** : D√©lai d√©pass√© (retry)',
      '',
      '### D√©sactivation automatique',
      '',
      'Un webhook est automatiquement d√©sactiv√© si :',
      '',
      '- Plus de 20 √©checs cons√©cutifs',
      '- Aucune r√©ponse 2xx depuis 7 jours',
      '- URL inaccessible depuis 48h',
      '',
      '## Test et debugging',
      '',
      '### Tester un webhook',
      '',
      '```http',
      'POST /v1/webhooks/{webhook_id}/test',
      'Content-Type: application/json',
      '',
      '{',
      '  "event": "invoice.paid"',
      '}',
      '```',
      '',
      '### Logs de webhooks',
      '',
      'Consultez les logs dans l\'interface :',
      '**Param√®tres** ‚Üí **Int√©grations** ‚Üí **Webhooks** ‚Üí **Logs**',
      '',
      '### Outil de debug : Webhook.site',
      '',
      'Pour tester rapidement :',
      '1. Allez sur https://webhook.site',
      '2. Copiez l\'URL g√©n√©r√©e',
      '3. Configurez cette URL comme webhook',
      '4. D√©clenchez un √©v√©nement',
      '5. Observez la requ√™te re√ßue',
      '',
      '## Bonnes pratiques',
      '',
      '### S√©curit√©',
      '- ‚úÖ Toujours valider la signature',
      '- ‚úÖ Utiliser HTTPS uniquement',
      '- ‚úÖ Filtrer les √©v√©nements n√©cessaires',
      '- ‚úÖ Impl√©menter une whitelist IP',
      '',
      '### Performance',
      '- ‚úÖ R√©pondre rapidement (< 10s)',
      '- ‚úÖ Traitement asynchrone des t√¢ches lourdes',
      '- ‚úÖ Queue pour les traitements longs',
      '- ‚úÖ Idempotence des traitements',
      '',
      '### Monitoring',
      '- ‚úÖ Logger tous les webhooks re√ßus',
      '- ‚úÖ Alertes sur les √©checs',
      '- ‚úÖ M√©triques de performance',
      '- ‚úÖ Health check de l\'endpoint',
      '',
      'üîî **Important** : Testez toujours vos webhooks avant la mise en production !'
    ]
  },
  'exemples-integration': {
    id: 'exemples-integration',
    title: 'Exemples d\'int√©gration',
    category: 'API et webhooks',
    description: 'Cas pratiques d\'int√©gration avec des outils populaires',
    readTime: '25 min',
    difficulty: 'Avanc√©',
    lastUpdated: '2025-01-15',
    author: '√âquipe technique CassKai',
    rating: 4.3,
    views: 189,
    content: [
      '# Exemples d\'int√©gration',
      '',
      'D√©couvrez des cas pratiques d\'int√©gration de CassKai avec des outils populaires.',
      '',
      '## 1. Int√©gration Shopify ‚Üí CassKai',
      '',
      'Synchroniser automatiquement les commandes Shopify vers CassKai.',
      '',
      '### Webhook Shopify',
      '',
      '```javascript',
      '// server.js - R√©ception webhook Shopify',
      'app.post(\'/webhook/shopify/order\', (req, res) => {',
      '  const order = req.body;',
      '',
      '  // Cr√©er le client s\'il n\'existe pas',
      '  const customer = await createCustomerIfNotExists({',
      '    email: order.customer.email,',
      '    name: `${order.customer.first_name} ${order.customer.last_name}`,',
      '    address: order.billing_address',
      '  });',
      '',
      '  // Cr√©er la facture',
      '  const invoice = await casskai.invoices.create({',
      '    customer_id: customer.id,',
      '    external_reference: order.order_number,',
      '    date: order.created_at,',
      '    lines: order.line_items.map(item => ({',
      '      description: item.name,',
      '      quantity: item.quantity,',
      '      unit_price: parseFloat(item.price),',
      '      tax_rate: calculateTaxRate(item.tax_lines)',
      '    }))',
      '  });',
      '',
      '  res.status(200).send(\'OK\');',
      '});',
      '```',
      '',
      '### Client CassKai',
      '',
      '```javascript',
      '// casskai-client.js',
      'class CassKaiClient {',
      '  constructor(apiToken) {',
      '    this.apiToken = apiToken;',
      '    this.baseUrl = \'https://api.casskai.app/v1\';',
      '  }',
      '',
      '  async request(method, endpoint, data = null) {',
      '    const response = await fetch(`${this.baseUrl}${endpoint}`, {',
      '      method,',
      '      headers: {',
      '        \'Authorization\': `Bearer ${this.apiToken}`,',
      '        \'Content-Type\': \'application/json\'',
      '      },',
      '      body: data ? JSON.stringify(data) : null',
      '    });',
      '',
      '    return response.json();',
      '  }',
      '',
      '  // Wrapper methods',
      '  invoices = {',
      '    create: (data) => this.request(\'POST\', \'/invoices\', data),',
      '    get: (id) => this.request(\'GET\', `/invoices/${id}`),',
      '    list: (params) => this.request(\'GET\', \'/invoices\' + querystring(params))',
      '  };',
      '',
      '  customers = {',
      '    create: (data) => this.request(\'POST\', \'/customers\', data),',
      '    findByEmail: (email) => this.request(\'GET\', `/customers?email=${email}`)',
      '  };',
      '}',
      '```',
      '',
      '## 2. Int√©gration WooCommerce ‚Üí CassKai',
      '',
      '### Plugin WordPress',
      '',
      '```php',
      '<?php',
      '// casskai-woocommerce.php',
      '',
      'add_action(\'woocommerce_order_status_completed\', \'casskai_create_invoice\');',
      '',
      'function casskai_create_invoice($order_id) {',
      '    $order = wc_get_order($order_id);',
      '    ',
      '    $invoice_data = array(',
      '        \'customer_id\' => casskai_get_or_create_customer($order),',
      '        \'date\' => date(\'Y-m-d\'),',
      '        \'external_reference\' => $order->get_order_number(),',
      '        \'lines\' => array()',
      '    );',
      '    ',
      '    // Ajouter les lignes de commande',
      '    foreach ($order->get_items() as $item) {',
      '        $invoice_data[\'lines\'][] = array(',
      '            \'description\' => $item->get_name(),',
      '            \'quantity\' => $item->get_quantity(),',
      '            \'unit_price\' => $item->get_total() / $item->get_quantity(),',
      '            \'tax_rate\' => casskai_calculate_tax_rate($item)',
      '        );',
      '    }',
      '    ',
      '    casskai_api_request(\'POST\', \'/invoices\', $invoice_data);',
      '}',
      '',
      'function casskai_api_request($method, $endpoint, $data = null) {',
      '    $api_token = get_option(\'casskai_api_token\');',
      '    ',
      '    $args = array(',
      '        \'method\' => $method,',
      '        \'headers\' => array(',
      '            \'Authorization\' => \'Bearer \' . $api_token,',
      '            \'Content-Type\' => \'application/json\'',
      '        )',
      '    );',
      '    ',
      '    if ($data) {',
      '        $args[\'body\'] = json_encode($data);',
      '    }',
      '    ',
      '    return wp_remote_request(\'https://api.casskai.app/v1\' . $endpoint, $args);',
      '}',
      '?>',
      '```',
      '',
      '## 3. Synchronisation Stripe ‚Üí CassKai',
      '',
      '### Webhook Stripe pour paiements',
      '',
      '```javascript',
      '// stripe-webhook.js',
      'const stripe = require(\'stripe\')(process.env.STRIPE_SECRET_KEY);',
      '',
      'app.post(\'/webhook/stripe\', express.raw({type: \'application/json\'}), async (req, res) => {',
      '  const sig = req.headers[\'stripe-signature\'];',
      '  let event;',
      '',
      '  try {',
      '    event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_ENDPOINT_SECRET);',
      '  } catch (err) {',
      '    return res.status(400).send(`Webhook Error: ${err.message}`);',
      '  }',
      '',
      '  switch (event.type) {',
      '    case \'payment_intent.succeeded\':',
      '      await handlePaymentSuccess(event.data.object);',
      '      break;',
      '    case \'invoice.payment_succeeded\':',
      '      await handleInvoicePayment(event.data.object);',
      '      break;',
      '  }',
      '',
      '  res.json({received: true});',
      '});',
      '',
      'async function handlePaymentSuccess(paymentIntent) {',
      '  const invoiceNumber = paymentIntent.metadata.invoice_number;',
      '  ',
      '  // R√©cup√©rer la facture CassKai',
      '  const invoices = await casskai.invoices.list({',
      '    number: invoiceNumber',
      '  });',
      '  ',
      '  if (invoices.data.length > 0) {',
      '    // Enregistrer le paiement',
      '    await casskai.invoices.payments.create(invoices.data[0].id, {',
      '      amount: paymentIntent.amount / 100, // Stripe en centimes',
      '      method: \'credit_card\',',
      '      reference: paymentIntent.id,',
      '      date: new Date().toISOString().split(\'T\')[0]',
      '    });',
      '  }',
      '}',
      '```',
      '',
      '## 4. Int√©gration CRM ‚Üí CassKai',
      '',
      '### Synchronisation clients HubSpot',
      '',
      '```python',
      '# hubspot_sync.py',
      'import requests',
      'from hubspot import HubSpot',
      'from datetime import datetime',
      '',
      'class HubSpotCassKaiSync:',
      '    def __init__(self, hubspot_token, casskai_token):',
      '        self.hubspot = HubSpot(access_token=hubspot_token)',
      '        self.casskai_token = casskai_token',
      '        self.casskai_base_url = \'https://api.casskai.app/v1\'',
      '    ',
      '    def sync_customers(self):',
      '        # R√©cup√©rer les contacts HubSpot',
      '        contacts = self.hubspot.crm.contacts.get_all()',
      '        ',
      '        for contact in contacts:',
      '            self.create_or_update_customer(contact)',
      '    ',
      '    def create_or_update_customer(self, hubspot_contact):',
      '        customer_data = {',
      '            \'company_name\': hubspot_contact.properties.get(\'company\'),',
      '            \'contact_name\': f"{hubspot_contact.properties.get(\'firstname\')} {hubspot_contact.properties.get(\'lastname\')}",',
      '            \'email\': hubspot_contact.properties.get(\'email\'),',
      '            \'phone\': hubspot_contact.properties.get(\'phone\'),',
      '            \'external_id\': str(hubspot_contact.id)',
      '        }',
      '        ',
      '        # V√©rifier si le client existe d√©j√†',
      '        existing = self.casskai_request(\'GET\', f\'/customers?external_id={hubspot_contact.id}\')',
      '        ',
      '        if existing[\'data\']:',
      '            # Mettre √† jour',
      '            customer_id = existing[\'data\'][0][\'id\']',
      '            self.casskai_request(\'PUT\', f\'/customers/{customer_id}\', customer_data)',
      '        else:',
      '            # Cr√©er',
      '            self.casskai_request(\'POST\', \'/customers\', customer_data)',
      '    ',
      '    def casskai_request(self, method, endpoint, data=None):',
      '        headers = {',
      '            \'Authorization\': f\'Bearer {self.casskai_token}\',',
      '            \'Content-Type\': \'application/json\'',
      '        }',
      '        ',
      '        response = requests.request(',
      '            method,',
      '            f\'{self.casskai_base_url}{endpoint}\',',
      '            headers=headers,',
      '            json=data',
      '        )',
      '        ',
      '        return response.json()',
      '',
      '# Utilisation',
      'sync = HubSpotCassKaiSync(',
      '    hubspot_token=\'your-hubspot-token\',',
      '    casskai_token=\'your-casskai-token\'',
      ')',
      'sync.sync_customers()',
      '```',
      '',
      '## 5. Export vers Excel/Google Sheets',
      '',
      '### Export automatique vers Google Sheets',
      '',
      '```javascript',
      '// google-sheets-export.js',
      'const { GoogleSpreadsheet } = require(\'google-spreadsheet\');',
      'const { JWT } = require(\'google-auth-library\');',
      '',
      'class CassKaiSheetsExporter {',
      '  constructor(cassKaiToken, sheetsCredentials, sheetId) {',
      '    this.cassKaiToken = cassKaiToken;',
      '    this.serviceAccountAuth = new JWT({',
      '      email: sheetsCredentials.client_email,',
      '      key: sheetsCredentials.private_key,',
      '      scopes: [\'https://www.googleapis.com/auth/spreadsheets\']',
      '    });',
      '    this.sheetId = sheetId;',
      '  }',
      '',
      '  async exportInvoices(startDate, endDate) {',
      '    // R√©cup√©rer les factures',
      '    const response = await fetch(`https://api.casskai.app/v1/invoices?date_from=${startDate}&date_to=${endDate}`, {',
      '      headers: {',
      '        \'Authorization\': `Bearer ${this.cassKaiToken}`',
      '      }',
      '    });',
      '    const invoices = await response.json();',
      '',
      '    // Ouvrir le Google Sheet',
      '    const doc = new GoogleSpreadsheet(this.sheetId, this.serviceAccountAuth);',
      '    await doc.loadInfo();',
      '    const sheet = doc.sheetsByIndex[0];',
      '',
      '    // Effacer le contenu existant',
      '    await sheet.clear();',
      '',
      '    // Ajouter les en-t√™tes',
      '    await sheet.setHeaderRow([',
      '      \'Num√©ro\', \'Date\', \'Client\', \'Montant HT\', \'TVA\', \'Montant TTC\', \'Statut\'',
      '    ]);',
      '',
      '    // Ajouter les donn√©es',
      '    const rows = invoices.data.map(invoice => ({',
      '      \'Num√©ro\': invoice.number,',
      '      \'Date\': invoice.date,',
      '      \'Client\': invoice.customer.name,',
      '      \'Montant HT\': invoice.total_ht,',
      '      \'TVA\': invoice.total_ttc - invoice.total_ht,',
      '      \'Montant TTC\': invoice.total_ttc,',
      '      \'Statut\': invoice.status',
      '    }));',
      '',
      '    await sheet.addRows(rows);',
      '    console.log(`${rows.length} factures export√©es vers Google Sheets`);',
      '  }',
      '}',
      '',
      '// Planification avec cron',
      'const cron = require(\'node-cron\');',
      '',
      'cron.schedule(\'0 9 1 * *\', () => {',
      '  // Export mensuel le 1er √† 9h',
      '  const lastMonth = new Date();',
      '  lastMonth.setMonth(lastMonth.getMonth() - 1);',
      '  ',
      '  const startDate = new Date(lastMonth.getFullYear(), lastMonth.getMonth(), 1)',
      '    .toISOString().split(\'T\')[0];',
      '  const endDate = new Date(lastMonth.getFullYear(), lastMonth.getMonth() + 1, 0)',
      '    .toISOString().split(\'T\')[0];',
      '  ',
      '  exporter.exportInvoices(startDate, endDate);',
      '});',
      '```',
      '',
      '## 6. Application mobile React Native',
      '',
      '### Client mobile simple',
      '',
      '```jsx',
      '// CassKaiApp.js',
      'import React, { useState, useEffect } from \'react\';',
      'import { View, FlatList, Text, StyleSheet } from \'react-native\';',
      '',
      'const CassKaiApp = () => {',
      '  const [invoices, setInvoices] = useState([]);',
      '  const [loading, setLoading] = useState(true);',
      '',
      '  useEffect(() => {',
      '    fetchInvoices();',
      '  }, []);',
      '',
      '  const fetchInvoices = async () => {',
      '    try {',
      '      const response = await fetch(\'https://api.casskai.app/v1/invoices\', {',
      '        headers: {',
      '          \'Authorization\': \'Bearer YOUR_TOKEN\'',
      '        }',
      '      });',
      '      const data = await response.json();',
      '      setInvoices(data.data);',
      '    } catch (error) {',
      '      console.error(\'Erreur fetch:\', error);',
      '    } finally {',
      '      setLoading(false);',
      '    }',
      '  };',
      '',
      '  const renderInvoice = ({ item }) => (',
      '    <View style={styles.invoiceItem}>',
      '      <Text style={styles.invoiceNumber}>{item.number}</Text>',
      '      <Text>{item.customer.name}</Text>',
      '      <Text style={styles.amount}>{item.total_ttc}‚Ç¨</Text>',
      '      <Text style={[styles.status, styles[item.status]]}>{item.status}</Text>',
      '    </View>',
      '  );',
      '',
      '  return (',
      '    <View style={styles.container}>',
      '      <FlatList',
      '        data={invoices}',
      '        renderItem={renderInvoice}',
      '        keyExtractor={(item) => item.id}',
      '        refreshing={loading}',
      '        onRefresh={fetchInvoices}',
      '      />',
      '    </View>',
      '  );',
      '};',
      '```',
      '',
      '## Conseils d\'int√©gration',
      '',
      '### Gestion d\'erreurs',
      '',
      '```javascript',
      'async function robustApiCall(endpoint, data, retries = 3) {',
      '  for (let i = 0; i < retries; i++) {',
      '    try {',
      '      const response = await casskai.request(\'POST\', endpoint, data);',
      '      return response;',
      '    } catch (error) {',
      '      if (error.status === 429) {',
      '        // Rate limit - attendre avant retry',
      '        await sleep(Math.pow(2, i) * 1000);',
      '        continue;',
      '      }',
      '      if (error.status >= 500) {',
      '        // Erreur serveur - retry',
      '        await sleep(1000);',
      '        continue;',
      '      }',
      '      // Erreur client - pas de retry',
      '      throw error;',
      '    }',
      '  }',
      '  throw new Error(\'Max retries exceeded\');',
      '}',
      '```',
      '',
      '### Cache et performance',
      '',
      '```javascript',
      'const NodeCache = require(\'node-cache\');',
      'const cache = new NodeCache({ stdTTL: 300 }); // 5 minutes',
      '',
      'async function getCachedCustomer(email) {',
      '  const cacheKey = `customer:${email}`;',
      '  let customer = cache.get(cacheKey);',
      '  ',
      '  if (!customer) {',
      '    const response = await casskai.customers.findByEmail(email);',
      '    customer = response.data[0];',
      '    cache.set(cacheKey, customer);',
      '  }',
      '  ',
      '  return customer;',
      '}',
      '```',
      '',
      'üõ†Ô∏è **Prochaines √©tapes** : Adaptez ces exemples √† votre architecture et testez sur un environnement de d√©veloppement !'
    ]
  }
};

const DocumentationArticlePage = () => {
  const { category: categoryParam, article: articleId } = useParams();
  const navigate = useNavigate();
  const { t } = useTranslation();
  const { toast } = useToast();
  const [hasRated, setHasRated] = useState(false);
  const [userRating, setUserRating] = useState<'positive' | 'negative' | null>(null);

  // Gestionnaires d'√©v√©nements
  const handleRating = (rating: 'positive' | 'negative') => {
    setHasRated(true);
    setUserRating(rating);
    
    toast({
      title: "Merci pour votre retour !",
      description: rating === 'positive' 
        ? "Nous sommes ravis que cet article vous ait √©t√© utile." 
        : "Nous prendrons en compte votre retour pour am√©liorer cet article.",
      duration: 3000
    });
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: article?.title || 'Article CassKai',
          text: article?.description || '',
          url: window.location.href
        });
      } catch (error) {
        console.log('Partage annul√©');
      }
    } else {
      toast({
        title: "Partage",
        description: "Fonctionnalit√© de partage non disponible sur votre navigateur"
      });
    }
  };

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(window.location.href);
      toast({
        title: "Lien copi√© !",
        description: "Le lien de l'article a √©t√© copi√© dans le presse-papiers"
      });
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Erreur",
        description: "Impossible de copier le lien"
      });
    }
  };

  // handleLiveChat supprim√© - remplac√© par WhatsAppChat

  const handleContactSupport = () => {
    window.open('mailto:support@casskai.app?subject=' + encodeURIComponent('Question sur: ' + (article?.title || 'Documentation')));
    toast({
      title: "Contact support",
      description: "Votre client email va s'ouvrir"
    });
  };

  // R√©cup√©rer l'article depuis la base de donn√©es ou les cat√©gories
  const getArticle = () => {
    // D'abord essayer dans articlesDatabase
    if (articlesDatabase[articleId]) {
      return articlesDatabase[articleId];
    }

    // Si pas trouv√©, chercher dans les cat√©gories
    if (categoryParam && categoriesData[categoryParam]) {
      const categoryArticles = categoriesData[categoryParam].articles;
      const foundArticle = categoryArticles.find(article => article.id === articleId);

      if (foundArticle) {
        // Convertir l'article de cat√©gorie au format attendu par le rendu
        return {
          id: foundArticle.id,
          title: foundArticle.title,
          category: categoriesData[categoryParam].title,
          description: foundArticle.description,
          readTime: foundArticle.readTime,
          difficulty: foundArticle.difficulty,
          lastUpdated: '2025-01-15', // Date par d√©faut
          author: '√âquipe CassKai',
          rating: 4.5,
          views: foundArticle.views,
          content: [`# ${foundArticle.title}`, '', foundArticle.description, '', '## Contenu en cours de d√©veloppement', '', 'Cette section sera bient√¥t compl√©t√©e avec des informations d√©taill√©es.']
        };
      }
    }

    return null;
  };

  const article = getArticle();

  // Si l'article n'existe pas, afficher une page 404
  if (!article) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
        <PublicNavigation variant="legal" />
        <div className="pt-24 pb-16">
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-4">
                Article non trouv√©
              </h1>
              <p className="text-gray-600 dark:text-gray-300 mb-8">
                L'article demand√© n'existe pas ou a √©t√© d√©plac√©.
              </p>
              <Button onClick={() => navigate('/help')}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                Retour au centre d'aide
              </Button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const renderContent = (contentLines) => {
    return contentLines.map((line, index) => {
      if (line.startsWith('# ')) {
        return <h1 key={index} className="text-3xl font-bold text-gray-900 dark:text-white mb-6 mt-8">{line.substring(2)}</h1>;
      }
      if (line.startsWith('## ')) {
        return <h2 key={index} className="text-2xl font-bold text-gray-900 dark:text-white mb-4 mt-8">{line.substring(3)}</h2>;
      }
      if (line.startsWith('### ')) {
        return <h3 key={index} className="text-xl font-semibold text-gray-900 dark:text-white mb-3 mt-6">{line.substring(4)}</h3>;
      }
      if (line.startsWith('#### ')) {
        return <h4 key={index} className="text-lg font-semibold text-gray-900 dark:text-white mb-2 mt-4">{line.substring(5)}</h4>;
      }
      if (line.startsWith('- ') || line.startsWith('* ')) {
        return <li key={index} className="text-gray-700 dark:text-gray-300 mb-1 ml-4">{line.substring(2)}</li>;
      }
      if (line.trim() === '') {
        return <br key={index} />;
      }
      if (line.startsWith('**') && line.endsWith('**')) {
        return <p key={index} className="font-semibold text-gray-900 dark:text-white mb-2">{line.slice(2, -2)}</p>;
      }
      return <p key={index} className="text-gray-700 dark:text-gray-300 mb-3 leading-relaxed">{line}</p>;
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
      <PublicNavigation variant="legal" />
      <div className="pt-24 pb-16">
      {/* Header */}
      <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="flex items-center mb-6">
            <Button
              variant="ghost"
              onClick={() => navigate('/help')}
              className="mr-4"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Centre d'aide
            </Button>
            <Badge variant="outline">{article.category}</Badge>
          </div>
          
          <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-4">
            {article.title}
          </h1>
          
          <p className="text-xl text-gray-600 dark:text-gray-300 mb-6">
            {article.description}
          </p>
          
          <div className="flex items-center space-x-6 text-sm text-gray-500 dark:text-gray-400">
            <div className="flex items-center">
              <Clock className="w-4 h-4 mr-2" />
              {article.readTime}
            </div>
            <div className="flex items-center">
              <User className="w-4 h-4 mr-2" />
              {article.author}
            </div>
            <div className="flex items-center">
              <Calendar className="w-4 h-4 mr-2" />
              {article.lastUpdated}
            </div>
            <div className="flex items-center">
              <Star className="w-4 h-4 mr-2 text-yellow-500" />
              {article.rating}/5
            </div>
          </div>
        </div>
      </div>

      {/* Contenu */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Contenu principal */}
          <div className="lg:col-span-3">
            <Card>
              <CardContent className="p-8">
                <div className="prose prose-lg dark:prose-invert max-w-none">
                  {renderContent(article.content)}
                </div>
              </CardContent>
            </Card>
            
            {/* Actions */}
            <div className="mt-8 flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <span className="text-sm text-gray-600 dark:text-gray-300">
                  Cet article vous a-t-il √©t√© utile ?
                </span>
                <Button 
                  variant={userRating === 'positive' ? 'default' : 'outline'} 
                  size="sm"
                  onClick={() => handleRating('positive')}
                  disabled={hasRated}
                >
                  <ThumbsUp className="w-4 h-4 mr-2" />
                  Oui
                </Button>
                <Button 
                  variant={userRating === 'negative' ? 'default' : 'outline'} 
                  size="sm"
                  onClick={() => handleRating('negative')}
                  disabled={hasRated}
                >
                  <ThumbsDown className="w-4 h-4 mr-2" />
                  Non
                </Button>
              </div>
              
              <div className="flex items-center space-x-2">
                <Button variant="outline" size="sm" onClick={handleShare}>
                  <Share2 className="w-4 h-4 mr-2" />
                  Partager
                </Button>
                <Button variant="outline" size="sm" onClick={handleCopyLink}>
                  <Copy className="w-4 h-4 mr-2" />
                  Copier le lien
                </Button>
              </div>
            </div>
          </div>
          
          {/* Sidebar */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <BookOpen className="w-5 h-5 mr-2" />
                  Articles li√©s
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {article.relatedArticles?.map((relatedId, index) => (
                    <Button
                      key={index}
                      variant="ghost"
                      className="w-full justify-start text-left h-auto p-3"
                      onClick={() => navigate(`/docs/${relatedId}`)}
                    >
                      <ArrowRight className="w-4 h-4 mr-2 flex-shrink-0" />
                      <span className="text-sm">{relatedId.replace(/-/g, ' ')}</span>
                    </Button>
                  ))}
                </div>
              </CardContent>
            </Card>
            
            <Card className="mt-6">
              <CardHeader>
                <CardTitle className="flex items-center">
                  <MessageCircle className="w-5 h-5 mr-2" />
                  Besoin d'aide ?
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">
                  Vous ne trouvez pas la r√©ponse √† votre question ?
                </p>
                <WhatsAppChat
                  messageType="documentation"
                  message={`Bonjour ! J'ai une question sur l'article "${article?.title}" de votre documentation CassKai.`}
                  className="w-full mb-3"
                />
                <Button variant="outline" className="w-full" onClick={handleContactSupport}>
                  Contacter le support
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
      </div>
    </div>
  );
};

export default DocumentationArticlePage;