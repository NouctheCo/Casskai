import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { useTranslation } from 'react-i18next';\nimport { useForm } from 'react-hook-form';\nimport { Settings, Globe, DollarSign, Clock, Calendar, Hash } from 'lucide-react';\n\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Form, FormItem, FormLabel, FormControl, FormMessage } from '../../components/ui/form';\nimport onboardingService from '../../services/onboardingService';\n\nconst PreferencesStep = ({ data, onUpdate, onNext }) => {\n  const { t } = useTranslation();\n  const [saving, setSaving] = useState(false);\n  const [languages, setLanguages] = useState([]);\n  const [timezones, setTimezones] = useState([]);\n  const [currencies, setCurrencies] = useState([]);\n  const [previewData, setPreviewData] = useState({\n    date: new Date(),\n    number: 1234.56,\n    currency: 'EUR'\n  });\n\n  const form = useForm({\n    defaultValues: {\n      language: data?.preferences?.language || 'fr',\n      timezone: data?.preferences?.timezone || 'Europe/Paris',\n      currency: data?.preferences?.currency || 'EUR',\n      dateFormat: data?.preferences?.dateFormat || 'DD/MM/YYYY',\n      numberFormat: data?.preferences?.numberFormat || '1 234,56',\n      fiscalYearStart: data?.preferences?.fiscalYearStart || '01/01',\n      accountingStandard: data?.preferences?.accountingStandard || 'PCG'\n    }\n  });\n\n  const { watch } = form;\n  const watchedValues = watch();\n\n  useEffect(() => {\n    // Charger les données des services\n    const loadData = async () => {\n      try {\n        const languagesList = onboardingService.getLanguages();\n        const timezonesList = onboardingService.getTimezones();\n        const marketConfigs = onboardingService.getMarketConfigs();\n        \n        setLanguages(languagesList);\n        setTimezones(timezonesList);\n        \n        // Extraire les devises des marchés\n        const uniqueCurrencies = [...new Set(marketConfigs.map(m => m.defaultCurrency))]\n          .map(currency => ({ value: currency, label: currency }));\n        setCurrencies(uniqueCurrencies);\n      } catch (error) {\n        console.error('Error loading data:', error);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    // Mettre à jour les données de prévisualisation\n    setPreviewData(prev => ({\n      ...prev,\n      currency: watchedValues.currency\n    }));\n  }, [watchedValues]);\n\n  const handleSubmit = async (formData) => {\n    try {\n      setSaving(true);\n      \n      // Sauvegarder via le service\n      await onboardingService.updatePreferences(data.userId, formData);\n      \n      // Mettre à jour les données locales\n      onUpdate({\n        preferences: formData\n      });\n      \n      onNext();\n    } catch (error) {\n      console.error('Error saving preferences:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const formatDate = (date, format) => {\n    const day = date.getDate().toString().padStart(2, '0');\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const year = date.getFullYear();\n    \n    switch (format) {\n      case 'DD/MM/YYYY':\n        return `${day}/${month}/${year}`;\n      case 'MM/DD/YYYY':\n        return `${month}/${day}/${year}`;\n      case 'YYYY-MM-DD':\n        return `${year}-${month}-${day}`;\n      default:\n        return `${day}/${month}/${year}`;\n    }\n  };\n\n  const formatNumber = (number, format) => {\n    switch (format) {\n      case '1 234,56':\n        return number.toLocaleString('fr-FR');\n      case '1,234.56':\n        return number.toLocaleString('en-US');\n      case '1.234,56':\n        return number.toLocaleString('de-DE');\n      default:\n        return number.toLocaleString('fr-FR');\n    }\n  };\n\n  const formatCurrency = (amount, currency) => {\n    return new Intl.NumberFormat('fr-FR', {\n      style: 'currency',\n      currency: currency\n    }).format(amount);\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: { staggerChildren: 0.1 }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 }\n  };\n\n  return (\n    <motion.div\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      className=\"max-w-4xl mx-auto\"\n    >\n      <motion.div variants={itemVariants} className=\"text-center mb-8\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"bg-purple-100 dark:bg-purple-900 p-3 rounded-full\">\n            <Settings className=\"w-8 h-8 text-purple-600 dark:text-purple-400\" />\n          </div>\n        </div>\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n          {t('onboarding.preferences.title', 'Préférences et paramètres')}\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-300\">\n          {t('onboarding.preferences.description', 'Configurez les paramètres selon vos besoins et préférences')}\n        </p>\n      </motion.div>\n\n      <Form onSubmit={form.handleSubmit(handleSubmit)}>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Langue et région */}\n          <motion.div variants={itemVariants}>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Globe className=\"w-5 h-5\" />\n                  <span>{t('onboarding.preferences.language.title', 'Langue et région')}</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormItem>\n                  <FormLabel>{t('onboarding.preferences.language.language', 'Langue de l\\'interface')} *</FormLabel>\n                  <FormControl>\n                    <select\n                      {...form.register('language', { required: true })}\n                      className=\"flex h-10 w-full rounded-md border border-input bg-white dark:bg-gray-900 px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n                    >\n                      {languages.map((language) => (\n                        <option key={language.value} value={language.value}>\n                          {language.label}\n                        </option>\n                      ))}\n                    </select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n\n                <FormItem>\n                  <FormLabel>{t('onboarding.preferences.language.timezone', 'Fuseau horaire')} *</FormLabel>\n                  <FormControl>\n                    <select\n                      {...form.register('timezone', { required: true })}\n                      className=\"flex h-10 w-full rounded-md border border-input bg-white dark:bg-gray-900 px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n                    >\n                      {timezones.map((timezone) => (\n                        <option key={timezone.value} value={timezone.value}>\n                          {timezone.label}\n                        </option>\n                      ))}\n                    </select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n\n                <FormItem>\n                  <FormLabel>{t('onboarding.preferences.language.currency', 'Devise principale')} *</FormLabel>\n                  <FormControl>\n                    <select\n                      {...form.register('currency', { required: true })}\n                      className=\"flex h-10 w-full rounded-md border border-input bg-white dark:bg-gray-900 px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n                    >\n                      {currencies.map((currency) => (\n                        <option key={currency.value} value={currency.value}>\n                          {currency.label}\n                        </option>\n                      ))}\n                    </select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Formats d'affichage */}\n          <motion.div variants={itemVariants}>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Hash className=\"w-5 h-5\" />\n                  <span>{t('onboarding.preferences.formats.title', 'Formats d\\'affichage')}</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormItem>\n                  <FormLabel>{t('onboarding.preferences.formats.dateFormat', 'Format des dates')} *</FormLabel>\n                  <FormControl>\n                    <select\n                      {...form.register('dateFormat', { required: true })}\n                      className=\"flex h-10 w-full rounded-md border border-input bg-white dark:bg-gray-900 px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n                    >\n                      <option value=\"DD/MM/YYYY\">DD/MM/YYYY (31/12/2024)</option>\n                      <option value=\"MM/DD/YYYY\">MM/DD/YYYY (12/31/2024)</option>\n                      <option value=\"YYYY-MM-DD\">YYYY-MM-DD (2024-12-31)</option>\n                    </select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n\n                <FormItem>\n                  <FormLabel>{t('onboarding.preferences.formats.numberFormat', 'Format des nombres')} *</FormLabel>\n                  <FormControl>\n                    <select\n                      {...form.register('numberFormat', { required: true })}\n                      className=\"flex h-10 w-full rounded-md border border-input bg-white dark:bg-gray-900 px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n                    >\n                      <option value=\"1 234,56\">1 234,56 (France)</option>\n                      <option value=\"1,234.56\">1,234.56 (US/UK)</option>\n                      <option value=\"1.234,56\">1.234,56 (Allemagne)</option>\n                    </select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n\n                {/* Prévisualisation */}\n                <div className=\"mt-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                  <h4 className=\"font-medium text-gray-900 dark:text-white mb-2\">\n                    {t('onboarding.preferences.formats.preview', 'Aperçu')}\n                  </h4>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-300 space-y-1\">\n                    <p><strong>{t('onboarding.preferences.formats.date', 'Date')}:</strong> {formatDate(previewData.date, watchedValues.dateFormat)}</p>\n                    <p><strong>{t('onboarding.preferences.formats.number', 'Nombre')}:</strong> {formatNumber(previewData.number, watchedValues.numberFormat)}</p>\n                    <p><strong>{t('onboarding.preferences.formats.currency', 'Devise')}:</strong> {formatCurrency(previewData.number, watchedValues.currency)}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Paramètres comptables */}\n          <motion.div variants={itemVariants}>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Calendar className=\"w-5 h-5\" />\n                  <span>{t('onboarding.preferences.accounting.title', 'Paramètres comptables')}</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormItem>\n                  <FormLabel>{t('onboarding.preferences.accounting.fiscalYearStart', 'Début d\\'exercice fiscal')} *</FormLabel>\n                  <FormControl>\n                    <select\n                      {...form.register('fiscalYearStart', { required: true })}\n                      className=\"flex h-10 w-full rounded-md border border-input bg-white dark:bg-gray-900 px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n                    >\n                      <option value=\"01/01\">1er janvier</option>\n                      <option value=\"01/04\">1er avril</option>\n                      <option value=\"01/07\">1er juillet</option>\n                      <option value=\"01/10\">1er octobre</option>\n                    </select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n\n                <FormItem>\n                  <FormLabel>{t('onboarding.preferences.accounting.standard', 'Norme comptable')} *</FormLabel>\n                  <FormControl>\n                    <select\n                      {...form.register('accountingStandard', { required: true })}\n                      className=\"flex h-10 w-full rounded-md border border-input bg-white dark:bg-gray-900 px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n                    >\n                      <option value=\"PCG\">PCG (Plan Comptable Général)</option>\n                      <option value=\"SYSCOHADA\">SYSCOHADA (Afrique)</option>\n                      <option value=\"GAAP\">GAAP (États-Unis)</option>\n                      <option value=\"IFRS\">IFRS (International)</option>\n                    </select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n\n                <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900 rounded-lg\">\n                  <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                    <strong>{t('onboarding.preferences.accounting.note', 'Note')}:</strong> {t('onboarding.preferences.accounting.noteText', 'Ces paramètres peuvent être modifiés ultérieurement dans les paramètres de l\\'entreprise.')}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Résumé des paramètres */}\n          <motion.div variants={itemVariants}>\n            <Card className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900 dark:to-pink-900\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <DollarSign className=\"w-5 h-5\" />\n                  <span>{t('onboarding.preferences.summary.title', 'Résumé des paramètres')}</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"bg-white dark:bg-gray-800 p-3 rounded-lg\">\n                    <h4 className=\"font-medium text-gray-900 dark:text-white mb-2\">\n                      {t('onboarding.preferences.summary.current', 'Paramètres actuels')}\n                    </h4>\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <div><strong>{t('onboarding.preferences.summary.language', 'Langue')}:</strong> {languages.find(l => l.value === watchedValues.language)?.label}</div>\n                      <div><strong>{t('onboarding.preferences.summary.timezone', 'Fuseau')}:</strong> {watchedValues.timezone}</div>\n                      <div><strong>{t('onboarding.preferences.summary.currency', 'Devise')}:</strong> {watchedValues.currency}</div>\n                      <div><strong>{t('onboarding.preferences.summary.fiscal', 'Exercice')}:</strong> {watchedValues.fiscalYearStart}</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    <p>{t('onboarding.preferences.summary.description', 'Ces paramètres seront appliqués à toute votre entreprise et peuvent être modifiés à tout moment.')}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n\n        <motion.div\n          variants={itemVariants}\n          className=\"mt-8 text-center\"\n        >\n          <Button\n            type=\"submit\"\n            disabled={saving}\n            className=\"px-8 py-3 bg-purple-600 hover:bg-purple-700\"\n          >\n            {saving ? t('onboarding.preferences.saving', 'Sauvegarde...') : t('onboarding.preferences.continue', 'Continuer')}\n          </Button>\n        </motion.div>\n      </Form>\n    </motion.div>\n  );\n};\n\nexport default PreferencesStep;